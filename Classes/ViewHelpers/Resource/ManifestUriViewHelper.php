<?php

declare(strict_types=1);

namespace De\SWebhosting\Bootstrap\ViewHelpers\Resource;

use Neos\Flow\Configuration\ConfigurationManager;
use Neos\Flow\Package\PackageManager;
use Neos\FluidAdaptor\Core\ViewHelper\AbstractViewHelper;
use RuntimeException;

class ManifestUriViewHelper extends AbstractViewHelper
{
    protected $escapeChildren = false;

    protected $escapeOutput = false;

    /**
     * @var PackageManager
     */
    private $packageManager;

    /**
     * @var array|null
     */
    private $settings;

    public function initializeArguments()
    {
        $this->registerArgument('file', 'string', 'The file that should be resolved in the manifest', true);

        $this->registerArgument(
            'isOptional',
            'boolean',
            'If true no Exception will be thrown if the file does not exist in the manifest',
            false,
            false
        );
    }

    public function injectConfigurationManager(ConfigurationManager $configurationManager): void
    {
        $settings = $configurationManager->getConfiguration(ConfigurationManager::CONFIGURATION_TYPE_SETTINGS);
        $this->settings = $settings['De']['SWebhosting']['Bootstrap']['manifest'] ?? [];
    }

    public function injectPackageManager(PackageManager $packageManager): void
    {
        $this->packageManager = $packageManager;
    }

    public function isChildrenEscapingEnabled()
    {
        return parent::isChildrenEscapingEnabled(); // TODO: Change the autogenerated stub
    }

    public function render(): string
    {
        $path = $this->getPathFromManifest();
        if (!$path) {
            if ($this->arguments['isOptional']) {
                return '';
            }

            throw new \RuntimeException('Could not resolve file in manifest: ' . $this->arguments['file']);
        }

        $this->templateVariableContainer->add('manifestUri', $path);
        $result = $this->renderChildren();
        $this->templateVariableContainer->remove('manifestUri');

        return $result;
    }

    private function getPathFromManifest(): string
    {
        if (empty($this->settings['package'])) {
            throw new RuntimeException(
                'Manifest package is not configured in De.SWebhosting.Bootstrap.anifest.package'
            );
        }
        $packagePath = $this->packageManager->getPackage($this->settings['package'])->getPackagePath();

        if (empty($this->settings['path'])) {
            throw new RuntimeException('Manifest path is not configured in De.SWebhosting.Bootstrap.anifest.path');
        }

        $manifestPath = $packagePath . DIRECTORY_SEPARATOR . $this->settings['path'];
        if (!file_exists($manifestPath)) {
            throw new RuntimeException('Configured manifest does not exist at ' . $manifestPath);
        }

        $manifestContent = json_decode(file_get_contents($manifestPath), true);
        if ($manifestContent === null) {
            throw new RuntimeException('Error decoding manifest!');
        }

        return $manifestContent[$this->arguments['file']] ?? '';
    }
}
